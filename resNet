import torch
import torch.nn as nn
import torchvision.models as models
import torch.nn.functional as F

# Hyper-parameters
num_features = 32
num_classes = 10

h = 64



class Net(nn.Module):
    def __init__(self, num_classes=num_classes, norm=True, scale=True):
        super(Net,self).__init__()
        self.extractor = Extractor()
        self.embedding = Embedding()
        self.classifier = Classifier(num_classes)
       
   
    def _forward(self, x):
        x = self.extractor(x)
        x = self.embedding(x)
      
        return x

    def forward(self, x):
        feature = self._forward(x)        
        return self.classifier(feature)

    def helper_extract(self, x):
        x = self.extractor(x)
        x = self.embedding(x)
      
        return x
    


class Extractor(nn.Module):
    def __init__(self):
        super(Extractor,self).__init__()
        basenet = models.resnet18(pretrained=True)
        basenet.conv1 = nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3) # ResNet was trained on RGB images convert to gray sclae
        self.extractor = nn.Sequential(*list(basenet.children())[:-1])
    
     
    def forward(self, x):
        x = self.extractor(x)
        x = x.view(x.size(0), -1)
  
        return x

class Embedding(nn.Module):
    def __init__(self):
        super(Embedding,self).__init__()
        self.fc = nn.Linear(3*3*h, num_features)
        
    def forward(self, x):
        x = self.fc(x)
        x = F.normalize(x, p=2, dim=1)
        return x


class Classifier(nn.Module):
    def __init__(self, num_classes):
        super(Classifier,self).__init__()
        self.fc = nn.Linear(num_features, num_classes, bias=False)
        
    def forward(self, x):
        x = self.fc(x)        
       
        return x


