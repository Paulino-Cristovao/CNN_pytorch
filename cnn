import torch
import torch.nn as nn
import torchvision.models as models
import torch.nn.functional as F

# Hyper-parameters
num_classes = 10 # for MNIST


class Net(nn.Module):
    def __init__(self, num_classes=num_classes, norm=True, scale=True):
        super(Net,self).__init__()
        self.extractor = Extractor()
        self.classifier = Classifier(num_classes)
   
    def _forward(self, x):
        x = self.extractor(x)
      
        return x

    def forward(self, x):
        feature = self._forward(x)        
        return self.classifier(feature), feature
    
    
class Layer(nn.Module):
    def __init__(self,in_feature=1, output_feature=32):
      super(Layer, self).__init__()
      self.in_feature = in_feature
      self.output_feature = output_feature

    
      self.layer = nn.Sequential(
                  nn.Conv2d(self.in_feature, self.output_feature, 3),
                  nn.BatchNorm2d(self.output_feature),
                  nn.ReLU(),
                  nn.MaxPool2d(3, 2),
                  nn.ReLU(),
                  )
     

    def forward(self, x):
      return self.layer(x) 

class Extractor(nn.Module):
    def __init__(self):
        super(Extractor,self).__init__()
       
        self.fc1 = Layer(1, 32, 3, 1)
        self.fc2 = Layer(32, 64, 3, 1)
        self.fc3 = Layer(64, 64, 2, 1)
        
    def forward(self, x):  
        x = self.fc1(x)
        x = self.fc2(x)
        x = self.fc3(x)
      
        x = x.view(x.size(0), -1)

        return x

class Classifier(nn.Module):
    def __init__(self, num_classes):
        super(Classifier,self).__init__()
        self.fc = nn.Linear(64, num_classes, bias=False)
        
    def forward(self, x):
        x = self.fc(x)        
       
        return x
